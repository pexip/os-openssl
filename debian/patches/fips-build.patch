diff --git a/crypto/o_init.c b/crypto/o_init.c
index a0b4256f..4ac15e4d 100644
--- a/crypto/o_init.c
+++ b/crypto/o_init.c
@@ -9,6 +9,59 @@
 
 #include "e_os.h"
 #include <openssl/err.h>
+#include <openssl/evp.h>
+#include <openssl/provider.h>
+
+# include <fcntl.h>
+# include <stdio.h>
+# include <stdlib.h>
+
+/* Don't attempt to build this on Windows (yet) */
+#if defined(OPENSSL_SYS_UNIX)
+static OSSL_PROVIDER *fips, *base;
+
+static void fips_cleanup(void)
+{
+    if (base != NULL)
+        OSSL_PROVIDER_unload(base);
+    if (fips != NULL)
+        OSSL_PROVIDER_unload(fips);
+}
+
+static __attribute__((constructor)) void fips_init(void)
+{
+    int want_fips = 0;
+    if (getenv("FIPS_FORCE_ENABLE") != NULL) {
+        want_fips = 1;
+    } else {
+        /* Not in FIPS mode; does flag exist? */
+        int fd = open("/etc/fips/enabled", O_RDONLY);
+        if (fd != -1) {
+            close(fd);
+            want_fips = 1;
+        }
+    }
+    if (want_fips) {
+        fips = OSSL_PROVIDER_load(NULL, "fips");
+        if (fips == NULL) {
+            abort();
+        }
+
+        base = OSSL_PROVIDER_load(NULL, "base");
+        if (base == NULL) {
+            OSSL_PROVIDER_unload(fips);
+            abort();
+        }
+
+        if (EVP_default_properties_enable_fips(NULL, 1) != 1) {
+            ERR_print_errors_fp(stderr);
+            abort();
+        }
+
+        OPENSSL_atexit(fips_cleanup);
+    }
+}
+#endif
 
 /*
  * Perform any essential OpenSSL initialization operations. Currently does
